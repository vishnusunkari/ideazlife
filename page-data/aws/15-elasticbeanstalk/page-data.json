{"componentChunkName":"component---src-templates-docs-js","path":"/aws/15-elasticbeanstalk","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":""}},"mdx":{"fields":{"id":"117130b8-1835-5a98-ba98-29edae526389","title":"Elastic Beanstalk","slug":"/aws/15-elasticbeanstalk"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Elastic Beanstalk\",\n  \"metaTitle\": \"Elastic Beanstalk\",\n  \"metaDescription\": \"What is AWS Elastic Beanstalk? Application, Environment, Application Version, Rolling deployments, All at once deployments,  Configuration presets, Creation of RDS Database instances \"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Elastic Beanstalk (Platform as a Service)\"), mdx(\"h3\", null, \"Application\"), mdx(\"p\", null, \"At the Base level is Application.  Container of environments, versions, environment configs.   \"), mdx(\"h3\", null, \"Environment\"), mdx(\"p\", null, \"An environment of a given tier(web server / worker batch jobs).\"), mdx(\"h3\", null, \"Application Version\"), mdx(\"p\", null, \"Distinct Version of application, eg: ApplicationName-V1.jar).    \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the background it uses CloudFormation.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Blue-Green Deployments natively.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Recommended to deploy databases outside of Beanstalk as the data can be deleted when the environment is removed.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eb-extensions folder inside Application Versions to allow config info to connect to SQS or other etc.  \")), mdx(\"p\", null, \"AWS Elastic Beanstalk provides several options for how deployments are processed, including deployment\\npolicies (All at once, Rolling, Rolling with additional batch, and Immutable) and options that let you\\nconfigure batch size and health check behavior during deployments.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"By default, your environment uses :\\n1. Rolling deployments if you created it with the console or EB CLI, or\\n2. All-at-once deployments if you created it with a different client (API, SDK, or AWS CLI).   \"), mdx(\"p\", null, \"Beanstalk takes care :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provisioning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Capacity Provisioning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Autoscaling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Load-balancing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application Health Monitoring.     \")), mdx(\"p\", null, \"To alter application settings and software configurations that run on the EC2 instances\\ncreated by Elastic Beanstalk, configuration files can be added to a specifically named\\nfolder in the application code versions, which are applied during the deployment process.   \"), mdx(\"p\", null, \"To use configuration files, a folder named .ebextensions is created at the top level of\\nthe project's source code. Then files with the extension .config are added to specify options.   \"), mdx(\"p\", null, \"Configuration Presets:\\n1. Low cost,\\n2. HA,\\n3. Custom configuration\"), mdx(\"h3\", null, \"Elastic Beanstalk Creation of RDS DB Instances\"), mdx(\"p\", null, \"Elastic Beanstalk takes care of creating the RDS databased instances automatically,\\nbut since the database hostname is not known until this environment is created, this\\nmay leave you asking, \\\"How will the application know \\\"what to use to connect to the database?\\\"\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Elastic Beanstalk takes care of this by providing access to such information through\\nenvironment properties. For RDS, it exposes all of the necessary connection parameter\\ninformation to the application as environment properties. These properties are passed\\nin the application when the Elastic Beanstalk creates the environment.\\nSo, the database hostname, DB name, the port, the username, and password can all be\\naccessed through environment variables.   \"), mdx(\"h3\", null, \"Rolling Deployments\"), mdx(\"p\", null, \"With rolling deployments, Elastic Beanstalk splits the environment's EC2 instances into batches and deploys\\nthe new version of the application to one batch at a time, leaving the rest of the instances in the\\nenvironment running the old version of the application. During a rolling deployment, some instances serve\\nrequests with the old version of the application, while instances in completed batches serve other requests\\nwith the new version.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#elastic-beanstalk-platform-as-a-service","title":"Elastic Beanstalk (Platform as a Service)"},{"url":"#application","title":"Application"},{"url":"#environment","title":"Environment"},{"url":"#application-version","title":"Application Version"},{"url":"#elastic-beanstalk-creation-of-rds-db-instances","title":"Elastic Beanstalk Creation of RDS DB Instances"},{"url":"#rolling-deployments","title":"Rolling Deployments"}]},"parent":{"relativePath":"aws/15-elasticbeanstalk.mdx"},"frontmatter":{"metaTitle":"Elastic Beanstalk","metaDescription":"What is AWS Elastic Beanstalk? Application, Environment, Application Version, Rolling deployments, All at once deployments,  Configuration presets, Creation of RDS Database instances "}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/aws","title":"AWS"}}},{"node":{"fields":{"slug":"/concepts","title":"RealWorld Concepts"}}},{"node":{"fields":{"slug":"/","title":"Technology Learning"}}},{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/kafka","title":"Kafka Concepts"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/pages/disclaimer","title":"Disclaimer"}}},{"node":{"fields":{"slug":"/pages/privacypolicy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/pages/terms-and-conditions","title":"Terms and Conditions"}}},{"node":{"fields":{"slug":"/kafka/00-what-is-kafka","title":"What is Kafka"}}},{"node":{"fields":{"slug":"/java/00-classloaders","title":"Java ClassLoaders"}}},{"node":{"fields":{"slug":"/java/01-functionalprogramming","title":"Functional Programming"}}},{"node":{"fields":{"slug":"/concepts/00-rotation-strategy","title":"Rotate Monthly"}}},{"node":{"fields":{"slug":"/aws/00-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/aws/01-awsorganizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/aws/02-awsconfig","title":"AWS Config"}}},{"node":{"fields":{"slug":"/aws/03-awsservicecatalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/aws/04-awssystemsmanager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/aws/05-elasticloadbalancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/aws/07-placementgroups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/aws/06-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/aws/08-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/aws/09-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/aws/11-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/aws/10-s3","title":"S3"}}},{"node":{"fields":{"slug":"/aws/12-rdsaurora","title":"RDS Aurora"}}},{"node":{"fields":{"slug":"/aws/13-cloudformation","title":"CloudFormation"}}},{"node":{"fields":{"slug":"/aws/14-opsworks","title":"OpsWorks"}}},{"node":{"fields":{"slug":"/aws/15-elasticbeanstalk","title":"Elastic Beanstalk"}}},{"node":{"fields":{"slug":"/kafka/01-topics-partitions-offsets","title":"Topics,Partitions & Offsets"}}},{"node":{"fields":{"slug":"/kafka/02-brokers","title":"Brokers"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"117130b8-1835-5a98-ba98-29edae526389"}}}