{"componentChunkName":"component---src-templates-docs-js","path":"/kafka/02-brokers","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":""}},"mdx":{"fields":{"id":"7f0c1da6-f2b5-5521-8925-e23d48c60160","title":"Brokers","slug":"/kafka/02-brokers"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Brokers\",\n  \"metaTitle\": \"Kafka Brokers, Topics and Leader for Partition\",\n  \"metaDescription\": \"Kafka Brokers and Topics. Concept of Leader for a Partition. At any time only ONE broker can be a leader for a given partition.  Example of brokers and partition. Concept of Leader for a partition\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Brokers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Kafka cluster is composed of multiple brokers (servers)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each broker is identified with its ID (integer)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each broker contains certain topic partitions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After connecting to any broker (called a bootstrap broker), you will be connected to the entire cluster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A good number to get started is 3 brokers, but some big clusters have over 100 brokers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can choose to number brokers starting at 100 (arbitrary)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"---------------       ---------------      --------------\\n|             |       |             |      |            |\\n| Broker 101  |       | Broker 102  |      | Broker 103 |\\n|             |       |             |      |            |\\n---------------       ---------------      --------------\\n\")), mdx(\"h3\", null, \"Brokers and Topics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example of Topic-A with 3 partitions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example of Topic-B with 2 partitions\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/0f63f3c50f263fe3f2be002339a70089/kafka_brokers.svg\",\n    \"alt\": \"kafka brokers and topics\",\n    \"title\": \"Kafka Brokers and Topics\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note: Data is distributed and Broker 103 doesn't have any Topic B data\")), mdx(\"h3\", null, \"Concept of Leader for a Partition\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"At any time only ONE broker can be a leader for a given partition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only that leader can receive and serve data for a partition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The other brokers will synchronize the data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Therefore each partition has one leader and multiple ISR (in-sync replica)\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/7fb1b5faad0af9e63f4988b6bfd12a7d/leader_partition.svg\",\n    \"alt\": \"Leader for a Partition\",\n    \"title\": \"Leader for a Partition\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#brokers","title":"Brokers"},{"url":"#brokers-and-topics","title":"Brokers and Topics"},{"url":"#concept-of-leader-for-a-partition","title":"Concept of Leader for a Partition"}]},"parent":{"relativePath":"kafka/02-brokers.mdx"},"frontmatter":{"metaTitle":"Kafka Brokers, Topics and Leader for Partition","metaDescription":"Kafka Brokers and Topics. Concept of Leader for a Partition. At any time only ONE broker can be a leader for a given partition.  Example of brokers and partition. Concept of Leader for a partition"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/aws","title":"AWS"}}},{"node":{"fields":{"slug":"/kafka","title":"Kafka Concepts"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/pages/disclaimer","title":"Disclaimer"}}},{"node":{"fields":{"slug":"/","title":"Technology Learning"}}},{"node":{"fields":{"slug":"/pages/privacypolicy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/pages/terms-and-conditions","title":"Terms and Conditions"}}},{"node":{"fields":{"slug":"/concepts","title":"RealWorld Concepts"}}},{"node":{"fields":{"slug":"/kafka/00-what-is-kafka","title":"What is Kafka"}}},{"node":{"fields":{"slug":"/kafka/01-topics-partitions-offsets","title":"Topics,Partitions & Offsets"}}},{"node":{"fields":{"slug":"/kafka/02-brokers","title":"Brokers"}}},{"node":{"fields":{"slug":"/kafka/03-producers","title":"Producers"}}},{"node":{"fields":{"slug":"/java/00-classloaders","title":"Java ClassLoaders"}}},{"node":{"fields":{"slug":"/java/01-functionalprogramming","title":"Functional Programming"}}},{"node":{"fields":{"slug":"/aws/00-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/aws/01-awsorganizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/aws/03-awsservicecatalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/aws/02-awsconfig","title":"AWS Config"}}},{"node":{"fields":{"slug":"/concepts/00-rotation-strategy","title":"Rotate Monthly"}}},{"node":{"fields":{"slug":"/aws/04-awssystemsmanager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/aws/06-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/aws/05-elasticloadbalancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/aws/07-placementgroups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/aws/09-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/aws/08-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/aws/10-s3","title":"S3"}}},{"node":{"fields":{"slug":"/aws/13-cloudformation","title":"CloudFormation"}}},{"node":{"fields":{"slug":"/aws/14-opsworks","title":"OpsWorks"}}},{"node":{"fields":{"slug":"/aws/15-elasticbeanstalk","title":"Elastic Beanstalk"}}},{"node":{"fields":{"slug":"/aws/11-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/aws/12-rdsaurora","title":"RDS Aurora"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7f0c1da6-f2b5-5521-8925-e23d48c60160"}}}