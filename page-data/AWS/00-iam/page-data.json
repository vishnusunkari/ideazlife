{"componentChunkName":"component---src-templates-docs-js","path":"/AWS/00-iam","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":"https://github.com/vishnusunkari/techread/tree/master/content"}},"mdx":{"fields":{"id":"874d2722-7644-588d-b544-34ec53b35ccf","title":"IAM","slug":"/AWS/00-iam"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IAM\",\n  \"metaTitle\": \"AWS IAM\",\n  \"metaDescription\": \"What is AWS IAM\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"IAM Role (Permissions)\"), mdx(\"p\", null, \"To attach IAM role to an application instance where the instance has to talk to a database like\\nDynamoDB: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Launch an IAM Role that has the required permissions to read and write from DynamoDB table. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reference the IAM Role in the instance profile property of the application instance. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assumed role comes from Trust Relationships which are only associated with roles. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AWS STS is not accessible thru console. Its accessible programmatically via API.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Roles can have policies attached to them and Roles can be applied to Servers, Users, Groups.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"eg: EC2Server accessing S3 Bucket can have role to access that S3 bucket.\")), mdx(\"h3\", null, \"AWS Directory Services:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Amazon Cloud Directory : Organize app data into hierarchies.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"AD Connector: Connects to on-premises AD.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Amazon Cognito: User directory allows to sign-in using social media.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Simple AD: Run AD-compatible directory, Samba 4 based, commonly integrates with WorkDocs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Microsoft AD running on EC2 instances on AWS Cloud.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#iam-role-permissions","title":"IAM Role (Permissions)"},{"url":"#aws-directory-services","title":"AWS Directory Services:"}]},"parent":{"relativePath":"AWS/00-iam.mdx"},"frontmatter":{"metaTitle":"AWS IAM","metaDescription":"What is AWS IAM"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/AWS","title":"AWS"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/AWS/01-awsorganizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/","title":"Technology Reading"}}},{"node":{"fields":{"slug":"/AWS/02-awsconfig","title":"AWS Config"}}},{"node":{"fields":{"slug":"/AWS/00-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/AWS/03-awsservicecatalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/AWS/04-awssystemsmanager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/AWS/06-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/AWS/05-elasticloadlalancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/AWS/08-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/AWS/09-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/AWS/10-s3","title":"S3"}}},{"node":{"fields":{"slug":"/AWS/11-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/AWS/07-placementgroups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/AWS/12-rdsaurora","title":"RDS Aurora"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"874d2722-7644-588d-b544-34ec53b35ccf"}}}