{"componentChunkName":"component---src-templates-docs-js","path":"/AWS/04-awssystemsmanager","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":"https://github.com/vishnusunkari/techread/tree/master/content"}},"mdx":{"fields":{"id":"c1d168ff-80f9-5510-bd5f-e8a7bedfee9d","title":"AWS Systems Manager","slug":"/AWS/04-awssystemsmanager"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"AWS Systems Manager\",\n  \"metaTitle\": \"AWS Systems Manager\",\n  \"metaDescription\": \"What is AWS Systems Manager? AWS Systems Manager is a collection of capabilities  for configuring and managing your Amazon EC2 instances, on-premises servers and virtual machines,  and other AWS resources at scale.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"AWS Systems Manager (SSM Agent)\"), mdx(\"p\", null, \"AWS Systems Manager manages resources inside an AWS account as well as\\non-premises or virtual machines (via activations) by installing ssm agent\\nand giving IAM permissions.  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All the modern AMIs are built-in with SSM agent.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AWS Systems Manager is a collection of capabilities for configuring and managing your\\nAmazon EC2 instances, on-premises servers and virtual machines, and other AWS resources at scale.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Systems Manager runs as a public zone end-point. So it needs a vpc end-point or an attached\\ninternet gateway to manage systems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Usually instance role (attached with IAM permissions policy - Managed permission policy called\\nAmazonEc2RoleforSSM) is attached to the Ec2 instance which enables SSM agent on this\\nec2 instance to talk to SSM end-point. Meaning this ec2 instance can fully communicate with SSM.\")), mdx(\"h3\", null, \"Managed Instances\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Inventory\"), \":  SSM gathers inventory data from all SSM managed instances and show it on dashboard.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Documents\"), \": define instructions of what Systems Manager needs to do inside systems. (yaml or json).\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Automation\"), \": set of actions as a workflow with a role to automate certain processes similar to Service Catalog or stack roles in cloudformation \"), mdx(\"h3\", null, \"Run Command\"), mdx(\"p\", null, \"Allows to execute a document on one or more managed instances.\"), mdx(\"h3\", null, \"Patch Manager\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Current state to up to date instances in terms of patches.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses underlying run command to deploy these patches\")), mdx(\"h3\", null, \"Parameter Store\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provides secure storage for sensitive config data such as secrets etc.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"eg: application.properties across fleet of ec2\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"/prod/DBApp1/db-string\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"/prod/DBApp1/db-password  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data is stored hierarchically. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data is versioned and access can be controlled and audited.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrates with EC2, ECS, Lambda, CodeBuild/Deploy etc.\")), mdx(\"p\", null, \"Q. How to make sure a yet to be created EC2 instance should be using latest AMI?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"A. Use CloudFormation with Systems Manager Parameter Store to retrieve the latest AMI IDs\\nfor your template.  Whenever you decide to update EC2 instances, call the update-stack API\\nin CloudFormation template.\"), mdx(\"h3\", null, \"Secrets Manager\"), mdx(\"p\", null, \"If you want a single store for configuration and secrets,\\nyou can use Parameter Store. If you want a dedicated secrets store with\\nlifecycle management and key rotation, use Secrets Manager.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#aws-systems-manager-ssm-agent","title":"AWS Systems Manager (SSM Agent)"},{"url":"#managed-instances","title":"Managed Instances"},{"url":"#run-command","title":"Run Command"},{"url":"#patch-manager","title":"Patch Manager"},{"url":"#parameter-store","title":"Parameter Store"},{"url":"#secrets-manager","title":"Secrets Manager"}]},"parent":{"relativePath":"AWS/04-awssystemsmanager.md"},"frontmatter":{"metaTitle":"AWS Systems Manager","metaDescription":"What is AWS Systems Manager? AWS Systems Manager is a collection of capabilities  for configuring and managing your Amazon EC2 instances, on-premises servers and virtual machines,  and other AWS resources at scale."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/AWS","title":"AWS"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/AWS/01-awsorganizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/","title":"Technology Reading"}}},{"node":{"fields":{"slug":"/AWS/02-awsconfig","title":"AWS Config"}}},{"node":{"fields":{"slug":"/AWS/00-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/AWS/03-awsservicecatalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/AWS/04-awssystemsmanager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/AWS/06-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/AWS/05-elasticloadlalancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/AWS/08-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/AWS/09-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/AWS/10-s3","title":"S3"}}},{"node":{"fields":{"slug":"/AWS/11-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/AWS/07-placementgroups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/AWS/12-rdsaurora","title":"RDS Aurora"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c1d168ff-80f9-5510-bd5f-e8a7bedfee9d"}}}